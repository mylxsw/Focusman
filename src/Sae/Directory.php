<?php
/**
 * Created by PhpStorm.
 * User: mylxsw
 * Date: 15/4/9
 * Time: 14:34
 */

namespace Focusman\Sae;


use Sabre\DAV\Collection;
use Sabre\DAV\DAV;
use Sabre\DAV\Exception\Forbidden;
use Sabre\DAV\Exception\NotFound;
use Sabre\DAV\IQuota;

/**
 * Class Directory
 * @package Focusman\Sae
 */
class Directory extends Collection implements IQuota {

    /**
     * @var string 目录路径
     */
    protected $_path;

    /**
     * @var SaeStorage
     */
    private $_saeStorage;

    public function __construct($path = '')
    {
        $this->setPath(trim($path, '/'));
        $this->_saeStorage = DI::getContainer()->get('saeStorage');
    }


    /**
     * Returns an array with all the child nodes
     *
     * @return \Sabre\DAV\INode[]
     */
    function getChildren() {
        $children = array();

        $files = $this->_saeStorage->getListByPath($this->getPath());
        foreach($files as $node) {
            $name = $node['name'];
            if (in_array($name, ['.', '..', '.placeholder'])) continue;

            $children[] = $this->getChild($name);
        }

        return $children;
    }

    /**
     * Returns the name of the node.
     *
     * This is used to generate the url.
     *
     * @return string
     */
    function getName() {
        return basename($this->getPath());
    }

    function getChild( $name ) {
        $path = $this->getPath() . '/' . $name;

        // 判断是否文件存在
        if (!$this->_saeStorage->fileExists($path)) {
            throw new NotFound("文件 {$name} 不存在");
        }

        if ($name == '.' || $name == '..')  throw new NotFound('禁止访问');
        if ($this->_saeStorage->isDirectory($path)) {
            return new Directory($path);
        }
        return new File($path);
    }

    function childExists( $name ) {
        $path = $this->getPath() . '/' . $name;
        $list = $this->_saeStorage->getListByPath($path);
        return !empty($list);
    }

    function createFile( $name, $data = null ) {

        $auth = DI::getContainer()->get('authentication');
        $totalSpace = $auth->getTotalSpace();
        $spaceLimit = $auth->getSpaceLimit();

        if ($totalSpace >= $spaceLimit) {
            throw new Forbidden("空间不足，无法创建文件");
        }

        $path = $this->getPath() . '/' . $name;
        $this->_saeStorage->write($path, $data);
    }

    function createDirectory( $name ) {
        $auth = DI::getContainer()->get('authentication');
        $totalSpace = $auth->getTotalSpace();
        $spaceLimit = $auth->getSpaceLimit();

        if ($totalSpace >= $spaceLimit) {
            throw new Forbidden("空间不足，无法创建文件");
        }

        $path = rtrim($this->getPath() . '/' . $name, '/');
        $this->_saeStorage->makeDirectory($path);
    }

    function getLastModified() {
        return parent::getLastModified(); // TODO: Change the autogenerated stub
    }

    function delete() {
        $list = $this->_saeStorage->getList($this->getPath());

        foreach ($list as $item) {
            $this->_saeStorage->delete($item);
        }
    }

    function setName( $name ) {
        if ($name == basename($this->getPath())) {
            return;
        }

        $new_name = dirname($this->getPath()) . '/' . $name;
        $files = $this->_saeStorage->getList($this->getPath());
        foreach ($files as $file) {
            $this->_saeStorage->rename($file, $new_name . '/' . basename($file));
        }

        $this->setPath($new_name);
    }

    protected function getPath() {
        return $this->_path;
    }

    protected function setPath($path) {
        $this->_path = $path;
    }

    /**
     * Returns the quota information
     *
     * This method MUST return an array with 2 values, the first being the total used space,
     * the second the available space (in bytes)
     */
    function getQuotaInfo() {
        // 已用空间
        $total_size = 0;
        $files = $this->_saeStorage->getList($this->getPath());
        foreach ($files as $file) {
            $attr = $this->_saeStorage->getAttr($file);
            $total_size += $attr['length'];
        }

        $auth = DI::getContainer()->get('authentication');

        return [
            $total_size, $auth->getSpaceLimit() - $total_size
        ];
    }
}